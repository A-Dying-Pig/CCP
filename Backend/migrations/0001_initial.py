# Generated by Django 2.1.3 on 2018-11-30 06:36

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32)),
                ('category', models.CharField(max_length=32)),
                ('grouped', models.BooleanField(default=False)),
                ('group_min_number', models.IntegerField(blank=True, null=True)),
                ('group_max_number', models.IntegerField(blank=True, null=True)),
                ('enroll_start', models.DateTimeField()),
                ('enroll_end', models.DateTimeField()),
                ('information', models.TextField()),
                ('brief_introduction', models.CharField(max_length=128)),
                ('phase_name1', models.CharField(blank=True, max_length=32, null=True)),
                ('phase_name2', models.CharField(blank=True, max_length=32, null=True)),
                ('phase_name3', models.CharField(blank=True, max_length=32, null=True)),
                ('phase_name4', models.CharField(blank=True, max_length=32, null=True)),
                ('phase_name5', models.CharField(blank=True, max_length=32, null=True)),
                ('phase_hand_end_time1', models.DateTimeField(blank=True, null=True)),
                ('phase_hand_end_time2', models.DateTimeField(blank=True, null=True)),
                ('phase_hand_end_time3', models.DateTimeField(blank=True, null=True)),
                ('phase_hand_end_time4', models.DateTimeField(blank=True, null=True)),
                ('phase_hand_end_time5', models.DateTimeField(blank=True, null=True)),
                ('phase_evaluate_end_time1', models.DateTimeField(blank=True, null=True)),
                ('phase_evaluate_end_time2', models.DateTimeField(blank=True, null=True)),
                ('phase_evaluate_end_time3', models.DateTimeField(blank=True, null=True)),
                ('phase_evaluate_end_time4', models.DateTimeField(blank=True, null=True)),
                ('phase_evaluate_end_time5', models.DateTimeField(blank=True, null=True)),
                ('phase_information1', models.CharField(blank=True, max_length=128, null=True)),
                ('phase_information2', models.CharField(blank=True, max_length=128, null=True)),
                ('phase_information3', models.CharField(blank=True, max_length=128, null=True)),
                ('phase_information4', models.CharField(blank=True, max_length=128, null=True)),
                ('phase_information5', models.CharField(blank=True, max_length=128, null=True)),
                ('phase_mode1', models.CharField(blank=True, max_length=16, null=True)),
                ('phase_mode2', models.CharField(blank=True, max_length=16, null=True)),
                ('phase_mode3', models.CharField(blank=True, max_length=16, null=True)),
                ('phase_mode4', models.CharField(blank=True, max_length=16, null=True)),
                ('phase_mode5', models.CharField(blank=True, max_length=16, null=True)),
                ('admin_id', models.IntegerField()),
                ('host1', models.CharField(max_length=32)),
                ('host2', models.CharField(blank=True, max_length=32, null=True)),
                ('host3', models.CharField(blank=True, max_length=32, null=True)),
                ('host4', models.CharField(blank=True, max_length=32, null=True)),
                ('organizers', models.CharField(max_length=255)),
                ('extra_title1', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_title2', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_title3', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_title4', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_group_title1', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_group_title2', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_group_title3', models.CharField(blank=True, max_length=32, null=True)),
                ('extra_group_title4', models.CharField(blank=True, max_length=32, null=True)),
                ('checked', models.IntegerField(default=-1)),
            ],
            options={
                'db_table': 'Contest',
            },
        ),
        migrations.CreateModel(
            name='ContestGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leader_id', models.IntegerField(db_index=True)),
                ('contest_id', models.IntegerField(db_index=True)),
                ('phase', models.IntegerField(blank=True, null=True)),
                ('judge_id', models.IntegerField(db_index=True, default=-1)),
                ('grade', models.IntegerField(default=-1)),
            ],
            options={
                'db_table': 'ContestGrade',
            },
        ),
        migrations.CreateModel(
            name='ContestGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leader_id', models.IntegerField(db_index=True)),
                ('member1_id', models.IntegerField(db_index=True, null=True)),
                ('member2_id', models.IntegerField(db_index=True, null=True)),
                ('member3_id', models.IntegerField(db_index=True, null=True)),
                ('member4_id', models.IntegerField(db_index=True, null=True)),
                ('contest_id', models.IntegerField(db_index=True)),
                ('group_name', models.CharField(max_length=32)),
                ('extra_information1', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information2', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information3', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information4', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'ContestGroup',
            },
        ),
        migrations.CreateModel(
            name='ContestJudge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('judge_id', models.IntegerField(db_index=True)),
                ('contest_id', models.IntegerField(db_index=True)),
            ],
            options={
                'db_table': 'ContestJudge',
            },
        ),
        migrations.CreateModel(
            name='ContestPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.IntegerField(db_index=True)),
                ('contest_id', models.IntegerField(db_index=True)),
                ('extra_information1', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information2', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information3', models.CharField(blank=True, max_length=64, null=True)),
                ('extra_information4', models.CharField(blank=True, max_length=64, null=True)),
                ('submitted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'ContestPlayer',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.CharField(max_length=2048)),
                ('title', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='NotificationUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_id', models.IntegerField(db_index=True)),
                ('user_id', models.IntegerField(db_index=True)),
                ('read', models.BooleanField(default=False)),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'NotificationUser',
            },
        ),
        migrations.CreateModel(
            name='CCPUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateTimeField(blank=True, null=True)),
                ('introduction', models.CharField(blank=True, max_length=64, null=True)),
                ('university', models.CharField(max_length=64, null=True)),
                ('province', models.CharField(max_length=32, null=True)),
                ('city', models.CharField(max_length=32, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'CCPUser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
